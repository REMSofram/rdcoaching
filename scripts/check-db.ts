import { createClient } from '@supabase/supabase-js';
import { Database } from '../src/types/database.types';

// Ce script n√©cessite que les variables d'environnement soient charg√©es
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || '';
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || '';

const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey);

async function checkDatabase() {
  console.log('V√©rification de la structure de la base de donn√©es...\n');
  
  // 1. V√©rifier le type enum user_role
  try {
    const { data: enumTypes, error } = await supabase
      .rpc('pg_typeof', { type_name: 'user_role' });
      
    if (error) {
      console.error('Erreur lors de la v√©rification du type enum user_role:', error);
    } else {
      console.log('‚úÖ Type enum user_role v√©rifi√© avec succ√®s');
    }
  } catch (err) {
    console.error('Erreur inattendue:', err);
  }
  
  // 2. V√©rifier la structure des tables
  await checkTable('profiles');
  await checkTable('daily_logs');
  
  // 3. V√©rifier les relations
  await checkRelations();
  
  // 4. V√©rifier les politiques RLS
  await checkRLSPolicies();
}

async function checkTable(tableName: string) {
  try {
    const { data, error } = await supabase
      .from(tableName)
      .select('*')
      .limit(1);
      
    if (error) {
      console.error(`‚ùå Erreur lors de la v√©rification de la table ${tableName}:`, error);
    } else {
      console.log(`‚úÖ Table ${tableName} accessible`);
    }
  } catch (err) {
    console.error(`Erreur lors de la v√©rification de la table ${tableName}:`, err);
  }
}

async function checkRelations() {
  // V√©rifier la relation entre daily_logs et profiles
  try {
    const { data, error } = await supabase
      .from('daily_logs')
      .select('*, profiles(*)')
      .limit(1);
      
    if (error) {
      console.error('‚ùå Erreur lors de la v√©rification des relations:', error);
    } else {
      console.log('‚úÖ Relations entre les tables v√©rifi√©es');
    }
  } catch (err) {
    console.error('Erreur lors de la v√©rification des relations:', err);
  }
}

async function checkRLSPolicies() {
  try {
    console.log('\nüîç V√©rification des politiques RLS...');
    
    // V√©rifier les politiques RLS pour les tables importantes
    const tablesToCheck = ['profiles', 'daily_logs', 'coach_clients'];
    let hasPolicies = false;
    
    for (const table of tablesToCheck) {
      try {
        // V√©rifier si la table a le RLS activ√©
        const { data: rlsStatus, error: rlsError } = await supabase
          .from('pg_tables')
          .select('*')
          .eq('schemaname', 'public')
          .eq('tablename', table)
          .single();
          
        if (rlsError || !rlsStatus) {
          console.error(`‚ùå Impossible de v√©rifier le statut RLS pour la table ${table}:`, rlsError);
          continue;
        }
        
        // V√©rifier les politiques RLS sp√©cifiques
        const { data: policies, error: policiesError } = await supabase
          .from('pg_policies')
          .select('*')
          .eq('schemaname', 'public')
          .eq('tablename', table);
          
        if (policiesError) {
          console.error(`‚ùå Erreur lors de la r√©cup√©ration des politiques pour ${table}:`, policiesError);
          continue;
        }
        
        if (policies && policies.length > 0) {
          if (!hasPolicies) {
            console.log('‚úÖ Politiques RLS configur√©es:');
            hasPolicies = true;
          }
          console.log(`   - Table: ${table}`);
          policies.forEach((policy: any) => {
            console.log(`     ‚Ä¢ ${policy.policyname}: ${policy.cmd} (${policy.roles.join(', ')})`);
            console.log(`       Condition: ${policy.qual || 'Aucune condition'}`);
          });
        } else {
          console.log(`‚ÑπÔ∏è Aucune politique RLS trouv√©e pour la table ${table}`);
        }
      } catch (err) {
        console.error(`Erreur lors de la v√©rification des politiques pour ${table}:`, err);
      }
    }
    
    if (!hasPolicies) {
      console.log('‚ÑπÔ∏è Aucune politique RLS trouv√©e pour les tables v√©rifi√©es');
    }
    
  } catch (err) {
    console.error('Erreur lors de la v√©rification des politiques RLS:', err);
  }
}

// Ex√©cuter la v√©rification
checkDatabase().catch(console.error);
