# Tasks - Correction des erreurs de build Vercel

## ‚ö†Ô∏è FICHIERS CRITIQUES CORROMPUS (√Ä TRAITER EN PREMIER)

### Task 1: R√©g√©n√©rer les types Supabase
**Fichiers:** `src/types/database.types.ts` et `src/types/supabase.ts`
**Raison:** Ces fichiers sont d√©tect√©s comme binaires corrompus par ESLint
**Action:** 
- Supprimer les fichiers existants
- R√©g√©n√©rer avec `npx supabase gen types typescript --project-id YOUR_PROJECT_ID > src/types/database.types.ts`
- Recr√©er `src/types/supabase.ts` avec les bonnes exports

---

## üî¥ ERREURS TYPESCRIPT (BLOQUANTES)

### Task 2: Corriger les types `any` explicites
**Raison:** TypeScript strict interdit l'usage de `any`, cause des erreurs de build

#### `src/app/auth/login/page.tsx`
- **Ligne 34:** Remplacer `(e: any)` par `(e: React.FormEvent<HTMLFormElement>)`

#### `src/app/auth/signup/page.tsx` 
- **Ligne 47:** Remplacer `(e: any)` par `(e: React.FormEvent<HTMLFormElement>)`

#### `src/app/coach/clients/[id]/nutrition/page.tsx`
- **Ligne 303:** Remplacer `(meal: any)` par `(meal: { id: string; name: string; [key: string]: unknown })`

#### `src/app/coach/clients/[id]/page.tsx`
- **Ligne 13:** D√©finir une interface `ClientData` au lieu de `any`
- **Ligne 56:** D√©finir une interface `ProfileData` au lieu de `any` 
- **Ligne 133:** D√©finir une interface `LogData` au lieu de `any`
- **Ligne 207:** Remplacer `(log: any)` par `(log: LogData)`
- **Ligne 308:** Remplacer `(data: any)` par `(data: ProfileData)`

#### `src/app/coach/clients/[id]/programme/page.tsx`
- **Ligne 261:** Remplacer `(exercise: any)` par `(exercise: { id: string; name: string; [key: string]: unknown })`

#### `src/app/coach/clients/page.tsx`
- **Ligne 17:** Remplacer `any[]` par `Client[]` (d√©finir interface Client)

#### `src/app/onboarding/page.tsx`
- **Ligne 120:** Remplacer `(e: any)` par `(e: React.FormEvent<HTMLFormElement>)`

#### `src/components/shared/Form.tsx`
- **Ligne 10:** Remplacer `any, any` par des types g√©n√©riques appropri√©s `<T, K>`

#### `src/contexts/AuthContext.tsx`
- **Lignes 12-15:** Cr√©er des interfaces `User`, `Profile` au lieu de `any`
- **Ligne 178:** Remplacer `(user: any)` par `(user: User | null)`
- **Ligne 216:** Remplacer `(profile: any)` par `(profile: Profile | null)`

#### `src/lib/auth.ts`
- **Lignes 6-7:** D√©finir des interfaces au lieu de `any`
- **Ligne 19:** Remplacer `any` par le bon type de retour
- **Ligne 79:** Remplacer `(error: any)` par `(error: Error)`

#### `src/lib/supabase.ts`
- **Ligne 22:** Remplacer `any` par le type appropri√© depuis database.types.ts

#### `src/services/clientService.ts`
- **Ligne 100:** Remplacer `any` par une interface appropri√©e
- **Ligne 203:** Remplacer `any` par le type de donn√©es attendu
- **Ligne 223:** Remplacer `any` par le type d'erreur appropri√©

---

## üü† ERREURS REACT/JSX

### Task 3: Corriger les apostrophes non √©chapp√©es
**Raison:** React exige l'√©chappement des apostrophes dans le JSX

#### `src/app/auth/signup/page.tsx`
- **Ligne 214:** `Don't` ‚Üí `Don&apos;t`
- **Ligne 216:** `can't` ‚Üí `can&apos;t` 
- **Ligne 248:** `We're` ‚Üí `We&apos;re`

#### `src/app/auth/verify-email/page.tsx`
- **Ligne 29:** √âchapper l'apostrophe

#### `src/app/client/calendrier/page.tsx`
- **Ligne 14:** √âchapper l'apostrophe

#### `src/app/client/nutrition/page.tsx`
- **Ligne 100:** √âchapper l'apostrophe

#### `src/app/client/programme/page.tsx`
- **Ligne 100:** √âchapper l'apostrophe
- **Ligne 132:** √âchapper l'apostrophe

#### `src/app/coach/clients/[id]/page.tsx`
- **Ligne 805:** √âchapper l'apostrophe

#### `src/app/coach/clients/[id]/programme/page.tsx`
- **Ligne 241:** √âchapper l'apostrophe

#### `src/components/shared/TabSystem.tsx`
- **Ligne 172:** √âchapper l'apostrophe

#### `src/components/tracking/DailyLogForm.tsx`
- **Ligne 276:** √âchapper l'apostrophe
- **Ligne 296:** √âchapper l'apostrophe
- **Ligne 303:** √âchapper l'apostrophe

#### `src/components/tracking/LogHistory.tsx`
- **Ligne 162:** √âchapper l'apostrophe

---

## üü° CORRECTIONS TYPESCRIPT MINEURES

### Task 4: Corriger les autres erreurs TypeScript

#### `src/app/coach/clients/[id]/programme/page.tsx`
- **Ligne 40:** Remplacer `@ts-ignore` par `@ts-expect-error` avec commentaire explicatif

#### `src/components/ui/textarea.tsx`
- **Ligne 4:** Ajouter des propri√©t√©s √† l'interface ou utiliser `type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>`

#### `src/components/tracking/MetricsSummary.tsx`
- **Ligne 86:** Remplacer `let currentDate` par `const currentDate`

---

## üü¢ NETTOYAGE DES VARIABLES INUTILIS√âES

### Task 5: Supprimer ou utiliser les variables inutilis√©es
**Raison:** Variables d√©clar√©es mais jamais utilis√©es, pollution du code

#### Variables √† supprimer (si vraiment inutilis√©es):
- `src/app/auth/login/page.tsx`: `router`, `searchParams` (lignes 15-16)
- `src/app/coach/clients/[id]/nutrition/page.tsx`: `NutritionDay`, `handleRemoveDay` (lignes 13, 116)
- `src/app/coach/clients/[id]/page.tsx`: `useParams`, `User`, `DailyLog`, etc.
- `src/app/coach/clients/page.tsx`: `Link` (ligne 5)
- `src/app/onboarding/page.tsx`: `useEffect`, `role`, `profileError` (lignes 3, 25, 44)
- `src/app/page.tsx`: `Button`, `Link` (lignes 6-7)

#### Variables dans les composants (v√©rifier si elles doivent √™tre utilis√©es):
- `src/components/auth/AuthInitializer.tsx`: toutes les variables (lignes 13-16)
- `src/layout/ClientLayout.tsx`: imports et variables inutilis√©s
- `src/layout/CoachLayout.tsx`: imports et variables inutilis√©s

---

## üîß CORRECTIONS REACT HOOKS

### Task 6: Corriger les d√©pendances des useEffect
**Raison:** React Hooks rules, peuvent causer des bugs ou des re-renders inutiles

#### `src/app/coach/clients/[id]/page.tsx`
- **Ligne 303:** Supprimer `profile` des d√©pendances (valeur externe)

#### `src/components/shared/TabSystem.tsx`
- **Ligne 121:** Ajouter `dayType` aux d√©pendances

#### `src/components/tracking/DailyLogForm.tsx`
- **Ligne 93:** Ajouter `loadLogForDate` aux d√©pendances
- **Ligne 98:** Ajouter `loadLogForDate` et `today` aux d√©pendances

#### `src/components/tracking/LogHistory.tsx`
- **Ligne 110:** Ajouter `limit` et `timeRange` aux d√©pendances

#### `src/components/tracking/MetricsSummary.tsx`
- **Ligne 116:** Ajouter `targetClientId` aux d√©pendances

---

## üìù ORDRE DE TRAITEMENT RECOMMAND√â

1. **Task 1** (Fichiers corrompus) - ‚ö†Ô∏è CRITIQUE
2. **Task 2** (Types any) - üî¥ BLOQUANT  
3. **Task 3** (Apostrophes) - üü† IMPORTANT
4. **Task 4** (Corrections TS mineures) - üü° MOYEN
5. **Task 5** (Variables inutilis√©es) - üü¢ NETTOYAGE
6. **Task 6** (useEffect deps) - üîß OPTIMISATION

## ‚úÖ V√âRIFICATION FINALE
Apr√®s chaque task, v√©rifier avec:
```bash
npm run build
npm run lint
```